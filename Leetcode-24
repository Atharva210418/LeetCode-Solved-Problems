34. Find First and Last Position of Element in Sorted Array-

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109








Solution - 


class Solution {


    public int binarysearch(int[] nums,int target,int low,int high)
    {  int mid;
       while(low<=high)
       {
           mid = low +(high-low)/2;

           if(nums[mid]==target)
           {
               return mid;
           }
           else if(nums[mid]>target)
           {
               high = mid-1;
           }
           else
           {
               low=mid+1;
           }
       }
       return -1;

    }
   

    public int[] searchRange(int[] nums, int target) {
        int low=0;
        int high= (nums.length)-1;
        int nums2[] = new int[2];

        int mid_pos = binarysearch(nums,target,low,high);
        if(mid_pos==-1)
        {
            nums2[0]=-1;
            nums2[1]=-1;
            return nums2;
        }
        int l =mid_pos;
        int r = mid_pos;


        while(l>0 && nums[l-1]==target)
        l--;


        while(r<nums.length-1 && nums[r+1]==target)
        r++;

        nums2[0]=l;
        nums2[1]=r;

        return nums2;


        
    }
}
